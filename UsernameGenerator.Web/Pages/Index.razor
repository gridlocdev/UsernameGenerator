@page "/"
@using UsernameGenerator.Core
@inject HttpClient Http;

<PageTitle>Username Generator App</PageTitle>

@if (service != null)
{
    <div class="container">

        <div class="username-container">
            <span class="username-text" style="background: -webkit-linear-gradient(@randomColorOne, @randomColorTwo);">
                @username
            </span>

            <span class="message-label">@errorMessage</span>

        </div>

        <div class="filter-controls">
            <section class="form-combo">
                <div class="form-checkbox-label">
                    <input type="checkbox" @onchange=@(() => usernameInputDisabled = !usernameInputDisabled)/>
                    <label for="numberOfLettersInput">Username Length: </label>
                </div>
                <input id="numberOfLettersInput" type="number" min="2" max="21" @bind="usernameLength" placeholder="Number of Letters" disabled="@usernameInputDisabled"/>
            </section>
            <section class="form-combo">
                <div class="form-checkbox-label">
                    <input type="checkbox" @onchange=@(() => firstWordSyllableCountInputDisabled = !firstWordSyllableCountInputDisabled)/>
                    <label for="firstWordSyllableCountInput">First Word Syllable Count: </label>
                </div>
                <input id="firstWordSyllableCountInput" type="number" min="1" max="4" @bind="firstWordSyllableCount" placeholder="Number of Syllables" disabled="@firstWordSyllableCountInputDisabled"/>
            </section>
            <section class="form-combo">
                <div class="form-checkbox-label">
                    <input type="checkbox" @onchange=@(() => secondWordSyllableCountInputDisabled = !secondWordSyllableCountInputDisabled)/>
                    <label for="secondWordSyllableCountInput">Second Word Syllable Count: </label>
                </div>
                <input id="secondWordSyllableCountInput" type="number" min="1" max="4" @bind="secondWordSyllableCount" placeholder="Number of Syllables" disabled="@secondWordSyllableCountInputDisabled"/>
            </section>
        </div>

        <button disabled="@isLoadingData" @onclick="async () => await GetNewUsername()">
            Generate New Username
        </button>

    </div>
}
else
{
    <div class="username-loading-container">
        <div class="username-loading-area">
            @* Loading Animation *@
            <span>Loading username data...</span>
            <div class="lds-ellipsis">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
            </div>
        </div>
    </div>
}


@code {
    string? username;
    bool isLoadingData;
    string errorMessage = "";
    byte usernameLength = 9;
    byte firstWordSyllableCount = 1;
    byte secondWordSyllableCount = 1;
    bool usernameInputDisabled = true;
    bool firstWordSyllableCountInputDisabled = true;
    bool secondWordSyllableCountInputDisabled = true;

    UsernameGeneratorService? service;
    string randomColorOne = "#FFFFFF";
    string randomColorTwo = "#FFFFFF";

    protected override async Task OnInitializedAsync()
    {
        service = new UsernameGeneratorService(await Http.GetFromJsonAsync<Word[]>("_appdata/words-and-syllables.json"));
    }

    async Task GetNewUsername()
    {
        if (service == null)
            return;

        try
        {
            errorMessage = "";
            isLoadingData = true;
            await Task.Delay(100);
            username = service.GetNewCombination(
                usernameInputDisabled is false ? usernameLength : null,
                firstWordSyllableCountInputDisabled is false ? firstWordSyllableCount : null,
                secondWordSyllableCountInputDisabled is false ? secondWordSyllableCount : null
            );
            GenerateRandomTextColors();
        }
        catch (TimeoutException ex)
        {
            errorMessage = ex.Message;
        }

        isLoadingData = false;
    }

    void GenerateRandomTextColors()
    {
        randomColorOne = $"#{new Random().Next(0x1000000):X6}";
        randomColorTwo = $"#{new Random().Next(0x1000000):X6}";
        StateHasChanged();
    }

}