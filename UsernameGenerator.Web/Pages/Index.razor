@page "/"
@using UsernameGenerator.Core
@inject HttpClient Http;

<PageTitle>Username Generator App</PageTitle>

<div class="header-bar">
    <h2>Username Generator App</h2>
    <span>( ) Info</span>
</div>

@if (service != null)
{
    <span class="username-header" style="background: -webkit-linear-gradient(@randomColorOne, @randomColorTwo);">
        @username
    </span>

    <button @onclick="GetNewUsername">Generate New Username</button>

    <div class="form-combo">
        <label for="numberOfLettersInput">Letters</label>
        <input id="numberOfLettersInput" type="number" min="2" max="21" @bind="usernameLength" placeholder="Number of Letters"/>
    </div>
}
else
{
    <div class="username-loading-container">
        <div class="username-loading-area">
            @* Loading Animation *@
            <span>Loading username data...</span>
            <div class="lds-ellipsis">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
            </div>
        </div>
    </div>
}


@code {
    string? username;
    byte usernameLength = 9;
    byte firstWordSyllableCount = 1;
    byte secondWordSyllableCount = 1;
    
    UsernameGeneratorService? service;
    string randomColorOne = "#FFFFFF";
    string randomColorTwo = "#FFFFFF";

    protected override async Task OnInitializedAsync()
    {
        service = new UsernameGeneratorService(await Http.GetFromJsonAsync<Word[]>("_appdata/words-and-syllables.json"));
    }

    void GetNewUsername()
    {
        GenerateRandomTextColors();
        if (service != null)
            username = service.GetNewCombination(usernameLength, firstWordSyllableCount, secondWordSyllableCount);
    }

    void GenerateRandomTextColors()
    {
        randomColorOne = $"#{new Random().Next(0x1000000):X6}";
        randomColorTwo = $"#{new Random().Next(0x1000000):X6}";
        StateHasChanged();
    }

}